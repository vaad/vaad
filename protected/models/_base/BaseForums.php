<?php

/**
 * This is the model base class for the table "forums".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Forums".
 *
 * Columns in table "forums" available as properties of the model,
 * followed by relations of table "forums" available as properties of the model.
 *
 * @property integer $id
 * @property integer $bld_id
 * @property string $forum_name
 * @property string $forum_desc
 * @property integer $forum_mngr
 *
 * @property Buildings $bld
 * @property Tenants $forumMngr
 * @property Posts[] $posts
 */
abstract class BaseForums extends VdActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'forums';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Forums|Forums', $n);
	}

	public static function representingColumn() {
		return 'forum_name';
	}

	public function rules() {
		return array(
			array(' forum_name', 'required'),
			array('bld_id, forum_mngr', 'numerical', 'integerOnly'=>true),
			array('forum_name', 'length', 'max'=>255),
			array('forum_desc', 'safe'),
			array('forum_desc, forum_mngr', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, bld_id, forum_name, forum_desc, forum_mngr', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'bld' => array(self::BELONGS_TO, 'Buildings', 'bld_id'),
			'forumMngr' => array(self::BELONGS_TO, 'Tenants', 'forum_mngr'),
			'posts' => array(self::HAS_MANY, 'Posts', 'forum_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'bld_id' => null,
			'forum_name' => Yii::t('app', 'Forum Name'),
			'forum_desc' => Yii::t('app', 'Forum Desc'),
			'forum_mngr' => null,
			'bld' => null,
			'forumMngr' => null,
			'posts' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('bld_id', $this->bld_id);
		$criteria->compare('forum_name', $this->forum_name, true);
		$criteria->compare('forum_desc', $this->forum_desc, true);
		$criteria->compare('forum_mngr', $this->forum_mngr);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}
