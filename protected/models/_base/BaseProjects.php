<?php

/**
 * This is the model base class for the table "projects".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Projects".
 *
 * Columns in table "projects" available as properties of the model,
 * followed by relations of table "projects" available as properties of the model.
 *
 * @property integer $id
 * @property integer $bld_id
 * @property string $prj_title
 * @property string $prj_desc
 * @property double $prj_approx_cost
 * @property double $prj_actual_cost
 * @property string $prj_approx_start_date
 * @property string $prj_actual_start_date
 * @property string $prj_approx_end_date
 * @property string $prj_actual_end_date
 *
 * @property Buildings $bld
 * @property Transactions[] $transactions
 * @property Incomes[] $incomes
 */
abstract class BaseProjects extends GxActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'projects';
    }

    protected function beforeFind() {
        $criteria = new CDbCriteria;
        $bld_id = Yii::app()->params['bld_id'];
        $criteria->condition = "bld_id = $bld_id";
        $criteria->order = "prj_title ASC";
        $this->dbCriteria->mergeWith($criteria);
        return parent::beforeFind();
    }

		protected function beforeSave() {
        $bld_id = Yii::app()->params['bld_id'];
				$this->bld_id = $bld_id;
				return parent::beforeSave();
		}

    public static function label($n = 1) {
        return Yii::t('app', 'Projects|Projects', $n);
    }

    public static function representingColumn() {
        return 'prj_title';
    }

    public function rules() {
        return array(
            array('bld_id', 'numerical', 'integerOnly' => true),
            array('prj_approx_cost, prj_actual_cost', 'numerical'),
            array('prj_title', 'length', 'max' => 50),
            array('prj_desc, prj_approx_start_date, prj_actual_start_date, prj_approx_end_date, prj_actual_end_date', 'safe'),
            array('prj_title, prj_desc, prj_approx_cost, prj_actual_cost, prj_approx_start_date, prj_actual_start_date, prj_approx_end_date, prj_actual_end_date', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, bld_id, prj_title, prj_desc, prj_approx_cost, prj_actual_cost, prj_approx_start_date, prj_actual_start_date, prj_approx_end_date, prj_actual_end_date', 'safe', 'on' => 'search'),
        );
    }

    public function relations() {
        return array(
            'bld' => array(self::BELONGS_TO, 'Buildings', 'bld_id'),
            'transactions' => array(self::HAS_MANY, 'Transactions', 'prj_id'),
            'incomes' => array(self::HAS_MANY, 'Incomes', 'prj_id'),
        );
    }

    public function pivotModels() {
        return array(
        );
    }

    public function attributeLabels() {
        return array(
            'id' => Yii::t('app', 'ID'),
            'bld_id' => null,
            'prj_title' => Yii::t('app', 'Prj Title'),
            'prj_desc' => Yii::t('app', 'Prj Desc'),
            'prj_approx_cost' => Yii::t('app', 'Prj Approx Cost'),
            'prj_actual_cost' => Yii::t('app', 'Prj Actual Cost'),
            'prj_approx_start_date' => Yii::t('app', 'Prj Approx Start Date'),
            'prj_actual_start_date' => Yii::t('app', 'Prj Actual Start Date'),
            'prj_approx_end_date' => Yii::t('app', 'Prj Approx End Date'),
            'prj_actual_end_date' => Yii::t('app', 'Prj Actual End Date'),
            'bld' => null,
            'transactions' => null,
            'incomes' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('bld_id', $this->bld_id);
        $criteria->compare('prj_title', $this->prj_title, true);
        $criteria->compare('prj_desc', $this->prj_desc, true);
        $criteria->compare('prj_approx_cost', $this->prj_approx_cost);
        $criteria->compare('prj_actual_cost', $this->prj_actual_cost);
        $criteria->compare('prj_approx_start_date', $this->prj_approx_start_date, true);
        $criteria->compare('prj_actual_start_date', $this->prj_actual_start_date, true);
        $criteria->compare('prj_approx_end_date', $this->prj_approx_end_date, true);
        $criteria->compare('prj_actual_end_date', $this->prj_actual_end_date, true);

        return new CActiveDataProvider($this, array(
                    'criteria' => $criteria,
                ));
    }

}
