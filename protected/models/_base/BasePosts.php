<?php

/**
 * This is the model base class for the table "posts".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Posts".
 *
 * Columns in table "posts" available as properties of the model,
 * followed by relations of table "posts" available as properties of the model.
 *
 * @property integer $id
 * @property integer $bld_id
 * @property integer $author_id
 * @property integer $pst_status
 * @property string $title
 * @property string $content_txt
 * @property string $pst_picture
 * @property string $create_time
 * @property string $update_time
 * @property integer $forum_id
 * @property boolean $adding_comments
 *
 * @property Comments[] $comments
 * @property PostTags[] $postTags
 * @property Tenants $author
 * @property Buildings $bld
 * @property Forums $forum
 * @property PostCodes $pstStatus
 */
abstract class BasePosts extends VdActiveRecord {

    protected function afterFind() {
        parent::afterFind();
        $this->create_time = date("h:i d/m/Y ", strtotime($this->create_time));
        $this->update_time = date("h:i d/m/Y ", strtotime($this->update_time));
    }

    public function beforeSave() {
        $this->create_time = DateTime::createFromFormat('h:i d/m/Y', $this->create_time);
        //$this->update_time = new CDbExpression('NOW()');

    }
    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'posts';
    }

    public static function label($n = 1) {
        return Yii::t('app', 'Post|Posts', $n);
    }

    public static function representingColumn() {
        return 'title';
    }

    public function rules() {
        return array(
            array(' author_id, pst_status, title, content_txt', 'required'),
            array('bld_id, author_id, pst_status, forum_id', 'numerical', 'integerOnly' => true),
            array('title, pst_picture', 'length', 'max' => 128),
            array('create_time, update_time, adding_comments', 'safe'),
            array('pst_picture, create_time, update_time, forum_id, adding_comments', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, bld_id, author_id, pst_status, title, content_txt, pst_picture, create_time, update_time, forum_id, adding_comments', 'safe', 'on' => 'search'),
        );
    }

    public function relations() {
        return array(
            'comments' => array(self::HAS_MANY, 'Comments', 'post_id'),
            'postTags' => array(self::HAS_MANY, 'PostTags', 'post_id'),
            'author' => array(self::BELONGS_TO, 'Tenants', 'author_id'),
            'bld' => array(self::BELONGS_TO, 'Buildings', 'bld_id'),
            'forum' => array(self::BELONGS_TO, 'Forums', 'forum_id'),
            'pstStatus' => array(self::BELONGS_TO, 'PostCodes', 'pst_status'),
        );
    }

    public function pivotModels() {
        return array(
        );
    }

    public function attributeLabels() {
        return array(
            'id' => Yii::t('app', 'ID'),
            'bld_id' => null,
            'author_id' => null,
            'pst_status' => null,
            'title' => Yii::t('app', 'Title'),
            'content_txt' => Yii::t('app', 'Content Txt'),
            'pst_picture' => Yii::t('app', 'Pst Picture'),
            'create_time' => Yii::t('app', 'Create Time'),
            'update_time' => Yii::t('app', 'Update Time'),
            'forum_id' => null,
            'adding_comments' => Yii::t('app', 'Adding Comments'),
            'comments' => null,
            'postTags' => null,
            'author' => null,
            'bld' => null,
            'forum' => null,
            'pstStatus' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('bld_id', $this->bld_id);
        $criteria->compare('author_id', $this->author_id);
        $criteria->compare('pst_status', $this->pst_status);
        $criteria->compare('title', $this->title, true);
        $criteria->compare('content_txt', $this->content_txt, true);
        $criteria->compare('pst_picture', $this->pst_picture, true);
        $criteria->compare('create_time', $this->create_time, true);
        $criteria->compare('update_time', $this->update_time, true);
        $criteria->compare('forum_id', $this->forum_id);
        $criteria->compare('adding_comments', $this->adding_comments);

        return new CActiveDataProvider($this, array(
                    'criteria' => $criteria,
                ));
    }

}
